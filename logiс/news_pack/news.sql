-- EXCEPTION 70 - 80
-- 70 news with this title already exists
-- 71 news data entered incorrectly
-- 72 news does not exist
-- 73 error delete news
-- 74 error update news
-- 75 error when reading news

--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM ADD_NEWS FOR FISHY_ADMIN.ADD_NEWS;
--DROP PUBLIC SYNONYM ADD_NEWS;

--DROP PROCEDURE ADD_NEWS;
CREATE OR REPLACE PROCEDURE ADD_NEWS(
NEWS_TITLE NEWS.TITLE%TYPE,
NEWS_INFO NEWS.INFO%TYPE,
NEWS_PHOTO NEWS.PHOTO%TYPE,
NEWS_USER_ID NEWS.USER_ID%TYPE)
IS
  NEWS_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO NEWS_COUNTER 
    FROM NEWS 
      WHERE TITLE = NEWS_TITLE;
  IF NEWS_COUNTER = 0 THEN
    INSERT INTO NEWS(TITLE,INFO,PHOTO,CREATED,USER_ID)
      VALUES (NEWS_TITLE,NEWS_INFO,NEWS_PHOTO,CURRENT_TIMESTAMP,NEWS_USER_ID);
  ELSE
    RAISE EXCEPTION_PACKAGE.NEWS_ALREADY_EXISTS;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.NEWS_ALREADY_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20070,'news with this title already exists');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20071, 'news data entered incorrectly');
END ADD_NEWS;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_NEWS_BY_ID FOR FISHY_ADMIN.DELETE_NEWS_BY_ID;
--DROP PUBLIC SYNONYM DELETE_NEWS_BY_ID;

--DROP PROCEDURE DELETE_NEWS_BY_ID;
CREATE OR REPLACE PROCEDURE DELETE_NEWS_BY_ID(
NEWS_ID NEWS.ID%TYPE)
IS
  NEWS_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO NEWS_COUNTER 
    FROM NEWS 
      WHERE ID = NEWS_ID;
  IF NEWS_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.NEWS_DOESNT_EXISTS;
  ELSE
    DELETE NEWS WHERE ID = NEWS_ID;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.NEWS_DOESNT_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20072,'news does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20073, 'error delete news');
END DELETE_NEWS_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_NEWS_BY_TITLE FOR FISHY_ADMIN.DELETE_NEWS_BY_TITLE;
--DROP PUBLIC SYNONYM DELETE_NEWS_BY_TITLE;

--DROP PROCEDURE DELETE_NEWS_BY_TITLE;
CREATE OR REPLACE PROCEDURE DELETE_NEWS_BY_TITLE(
NEWS_TITLE NEWS.TITLE%TYPE)
IS
  NEWS_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO NEWS_COUNTER 
    FROM NEWS 
      WHERE UPPER(TITLE) = UPPER(NEWS_TITLE);
  IF NEWS_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.NEWS_DOESNT_EXISTS;
  ELSE
    DELETE NEWS WHERE UPPER(TITLE) = UPPER(NEWS_TITLE);
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.NEWS_DOESNT_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20072,'news does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20073, 'error delete news');
END DELETE_NEWS_BY_TITLE;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM UPDATE_NEWS FOR FISHY_ADMIN.UPDATE_NEWS;
--DROP PUBLIC SYNONYM UPDATE_NEWS;

--DROP PROCEDURE UPDATE_NEWS;
CREATE OR REPLACE PROCEDURE UPDATE_NEWS(
NEWS_ID NEWS.ID%TYPE,
NEWS_TITLE NEWS.TITLE%TYPE:= NULL,
NEWS_INFO NEWS.INFO%TYPE := NULL,
NEWS_PHOTO NEWS.PHOTO%TYPE:= NULL)
IS
  NEW_NEWS_TITLE NEWS.TITLE%TYPE;
  NEW_NEWS_INFO NEWS.INFO%TYPE;
  NEW_NEWS_PHOTO NEWS.PHOTO%TYPE;
  
  CHANGEABLE_ENTRY NEWS%ROWTYPE;
BEGIN
  SELECT * INTO CHANGEABLE_ENTRY FROM NEWS WHERE ID = NEWS_ID;
  
  IF NEWS_TITLE IS NULL THEN
    NEW_NEWS_TITLE := CHANGEABLE_ENTRY.TITLE;
  ELSE
    NEW_NEWS_TITLE := NEWS_TITLE;
  END IF;
  IF NEWS_INFO IS NULL THEN
    NEW_NEWS_INFO := CHANGEABLE_ENTRY.INFO;
  ELSE
    NEW_NEWS_INFO := NEWS_INFO;
  END IF;
  IF NEWS_PHOTO IS NULL THEN
    NEW_NEWS_PHOTO := CHANGEABLE_ENTRY.PHOTO;
  ELSE
    NEW_NEWS_PHOTO := NEWS_PHOTO;
  END IF;
  
  UPDATE NEWS 
    SET TITLE = NEW_NEWS_TITLE,INFO = NEW_NEWS_INFO,PHOTO = NEW_NEWS_PHOTO 
      WHERE ID = NEWS_ID;
  COMMIT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20072,'news does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20074, 'error update news');
END UPDATE_NEWS;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_NEWS FOR FISHY_ADMIN.GET_NEWS;
--DROP PUBLIC SYNONYM GET_NEWS;

--DROP PROCEDURE GET_NEWS;
CREATE OR REPLACE PROCEDURE GET_NEWS(
RESULT_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT *
      FROM NEWS_VIEW 
        ORDER BY NEWS_CREATED DESC;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20075, 'error when reading news');
END GET_NEWS;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_NEWS_BY_ID FOR FISHY_ADMIN.GET_NEWS_BY_ID;
--DROP PUBLIC SYNONYM GET_NEWS_BY_ID;

--DROP PROCEDURE GET_NEWS_BY_ID;
CREATE OR REPLACE PROCEDURE GET_NEWS_BY_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
N_ID NEWS_VIEW.NEWS_ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT *
      FROM NEWS_VIEW 
        WHERE NEWS_ID = N_ID;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20075, 'error when reading news');
END GET_NEWS_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_NEWS_BY_TITLE FOR FISHY_ADMIN.GET_NEWS_BY_TITLE;
--DROP PUBLIC SYNONYM GET_NEWS_BY_TITLE;

--DROP PROCEDURE GET_NEWS_BY_TITLE;
CREATE OR REPLACE PROCEDURE GET_NEWS_BY_TITLE(
RESULT_CURSOR OUT SYS_REFCURSOR,
N_TITLE NEWS_VIEW.NEWS_TITLE%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT * FROM NEWS_VIEW 
      WHERE UPPER(NEWS_TITLE) LIKE UPPER('%'||N_TITLE||'%')
        ORDER BY NEWS_CREATED DESC;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20075, 'error when reading news');
END GET_NEWS_BY_TITLE;
--------------------------------------------------------------------------------

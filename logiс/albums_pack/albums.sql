---EXCEPTIONS 20 - 30

--20 album with this title already exists
--21 create album error check the entered data
--22 album with that id does not exist
--23 delete album error check the entered data
--24 album with that name does not exist
--25 album with that date does not exist
--26 album with that user_id does not exist
--27 error when reading albums
--28 update album error check the entered data
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM ADD_ALBUM FOR FISHY_ADMIN.ADD_ALBUM;
--DROP PUBLIC SYNONYM ADD_ALBUM;

--DROP PROCEDURE ADD_ALBUM;
CREATE OR REPLACE PROCEDURE ADD_ALBUM(
ALBUM_TITLE IN ALBUMS.TITLE%TYPE,
OWNER_ID IN ALBUMS.USER_ID%TYPE)
IS
  ALBUM_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO ALBUM_COUNTER FROM ALBUMS 
    WHERE TITLE = ALBUM_TITLE AND USER_ID = OWNER_ID;
  IF ALBUM_COUNTER = 0 THEN
    INSERT INTO ALBUMS(TITLE,USER_ID,CREATED) 
      VALUES(ALBUM_TITLE,OWNER_ID,CURRENT_TIMESTAMP);
  ELSE
    RAISE EXCEPTION_PACKAGE.ALBUM_ALREADY_EXISTS;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.ALBUM_ALREADY_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20020, 'album with this title already exists');
      
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20021, 'create album error check the entered data');
END ADD_ALBUM;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_ALBUM_BY_ID FOR FISHY_ADMIN.DELETE_ALBUM_BY_ID;
--DROP PUBLIC SYNONYM DELETE_ALBUM_BY_ID;

--DROP PROCEDURE DELETE_ALBUM_BY_ID;
CREATE OR REPLACE PROCEDURE DELETE_ALBUM_BY_ID(
ALBUM_ID IN ALBUMS.ID%TYPE)
IS
  ALBUM_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO ALBUM_COUNTER 
    FROM ALBUMS
      WHERE ID = ALBUM_ID;
  IF ALBUM_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS;
  ELSE
    DELETE ALBUMS WHERE ID = ALBUM_ID;
  END IF;
  COMMIT;
  EXCEPTION
    WHEN EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS THEN
      RAISE_APPLICATION_ERROR(-20022, 'album with that id does not exist');
    
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20023, 'delete album error check the entered data');
END DELETE_ALBUM_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_ALBUM_BY_USER_ID FOR FISHY_ADMIN.DELETE_ALBUM_BY_USER_ID;
--DROP PUBLIC SYNONYM DELETE_ALBUM_BY_USER_ID;

--DROP PROCEDURE DELETE_ALBUM_BY_USER_ID;
CREATE OR REPLACE PROCEDURE DELETE_ALBUM_BY_USER_ID(
ALBUM_USER_ID IN ALBUMS.USER_ID%TYPE)
IS
  ALBUM_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO ALBUM_COUNTER 
    FROM ALBUMS 
      WHERE USER_ID = ALBUM_USER_ID;
  IF ALBUM_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS;
  ELSE
    DELETE ALBUMS 
      WHERE USER_ID = ALBUM_USER_ID;
  END IF;
  COMMIT;
  EXCEPTION
    WHEN EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS THEN
      RAISE_APPLICATION_ERROR(-20026, 'album with that user_id does not exist');
    
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20023, 'delete album error check the entered data');
END DELETE_ALBUM_BY_USER_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_ALBUM_BY_TITLE FOR FISHY_ADMIN.DELETE_ALBUM_BY_TITLE;
--DROP PUBLIC SYNONYM DELETE_ALBUM_BY_TITLE;

--DROP PROCEDURE DELETE_ALBUM_BY_TITLE;
CREATE OR REPLACE PROCEDURE DELETE_ALBUM_BY_TITLE(
ALBUM_USER_ID IN ALBUMS.USER_ID%TYPE,
ALBUM_TITLE IN ALBUMS.TITLE%TYPE)
IS
  ALBUM_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO ALBUM_COUNTER 
    FROM ALBUMS 
      WHERE UPPER(TITLE) = UPPER(ALBUM_TITLE) 
        AND USER_ID = ALBUM_USER_ID;
  IF ALBUM_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS;
  ELSE
    DELETE ALBUMS 
      WHERE UPPER(TITLE) = UPPER(ALBUM_TITLE)
        AND USER_ID = ALBUM_USER_ID;
  END IF;
  COMMIT;
  EXCEPTION
    WHEN EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS THEN
      RAISE_APPLICATION_ERROR(-20024, 'album with that name does not exist');
    
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20023, 'delete album error check the entered data');
END DELETE_ALBUM_BY_TITLE;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_ALBUM_BY_DATE FOR FISHY_ADMIN.DELETE_ALBUM_BY_DATE;
--DROP PUBLIC SYNONYM DELETE_ALBUM_BY_DATE;

--DROP PROCEDURE DELETE_ALBUM_BY_DATE;
CREATE OR REPLACE PROCEDURE DELETE_ALBUM_BY_DATE(
ALBUM_USER_ID IN ALBUMS.USER_ID%TYPE,
DELETE_DATE IN DATE,
AFTER_DATE IN BOOLEAN := FALSE)
IS
  ALBUM_COUNTER NUMBER;
BEGIN
  IF AFTER_DATE = TRUE THEN
    SELECT COUNT(*) INTO ALBUM_COUNTER 
      FROM ALBUMS 
        WHERE CREATED > CAST(DELETE_DATE AS TIMESTAMP) 
          AND USER_ID = ALBUM_USER_ID;
  ELSE
    SELECT COUNT(*) INTO ALBUM_COUNTER
      FROM ALBUMS 
        WHERE CREATED < CAST(DELETE_DATE AS TIMESTAMP) 
          AND USER_ID = ALBUM_USER_ID;
  END IF;
  IF ALBUM_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS;
  ELSE
    IF AFTER_DATE = TRUE THEN
      DELETE ALBUMS  WHERE CREATED > CAST(DELETE_DATE AS TIMESTAMP)
        AND USER_ID = ALBUM_USER_ID;
    ELSE
      DELETE ALBUMS WHERE CREATED < CAST(DELETE_DATE AS TIMESTAMP)
        AND USER_ID = ALBUM_USER_ID;
    END IF;
  END IF;
  COMMIT;
EXCEPTION
    WHEN EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS THEN
      RAISE_APPLICATION_ERROR(-20025, 'album with that date does not exist');
    
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20023, 'delete album error check the entered data');
END DELETE_ALBUM_BY_DATE;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM UPDATE_ALBUM FOR FISHY_ADMIN.UPDATE_ALBUM;
--DROP PUBLIC SYNONYM UPDATE_ALBUM;

--DROP PROCEDURE UPDATE_ALBUM;
CREATE OR REPLACE PROCEDURE UPDATE_ALBUM(
ALBUM_ID IN ALBUMS.ID%TYPE,
ALBUM_TITLE IN ALBUMS.TITLE%TYPE)
IS
  ALBUM_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO ALBUM_COUNTER 
    FROM ALBUMS 
      WHERE ID = ALBUM_ID;
  IF ALBUM_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS;
  ELSE
    UPDATE ALBUMS SET TITLE = ALBUM_TITLE
      WHERE ID = ALBUM_ID;
  END IF;
  COMMIT;
EXCEPTION
    WHEN EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS THEN
      RAISE_APPLICATION_ERROR(-20022, 'there is no album with this ID');
    
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20028, 'update album error check the entered data');
END UPDATE_ALBUM;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_ALBUM_BY_ID FOR FISHY_ADMIN.GET_ALBUM_BY_ID;
--DROP PUBLIC SYNONYM GET_ALBUM_BY_ID;

--DROP PROCEDURE GET_ALBUM_BY_ID;
CREATE OR REPLACE PROCEDURE GET_ALBUM_BY_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
A_ID IN ALBUMS_VIEW.ALBUM_ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT ALBUM_ID,ALBUM_TITLE,ALBUM_CREATED 
      FROM ALBUMS_VIEW
        WHERE ALBUM_ID = A_ID;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20027, 'error when reading albums');
END GET_ALBUM_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_ALBUMS_BY_USER_ID FOR FISHY_ADMIN.GET_ALBUMS_BY_USER_ID;
--DROP PUBLIC SYNONYM GET_ALBUMS_BY_USER_ID;

--DROP PROCEDURE GET_ALBUMS_BY_USER_ID;
CREATE OR REPLACE PROCEDURE GET_ALBUMS_BY_USER_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
ALBUM_USER_ID IN USERS.ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR SELECT ALBUM_ID,ALBUM_TITLE,ALBUM_CREATED 
    FROM ALBUMS_VIEW
      WHERE OWNER_ID = ALBUM_USER_ID;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20027, 'error when reading albums');
END GET_ALBUMS_BY_USER_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_ALBUMS_BY_TITLE FOR FISHY_ADMIN.GET_ALBUMS_BY_TITLE;
--DROP PUBLIC SYNONYM GET_ALBUMS_BY_TITLE;

--DROP PROCEDURE GET_ALBUMS_BY_TITLE;
CREATE OR REPLACE PROCEDURE GET_ALBUMS_BY_TITLE(
RESULT_CURSOR OUT SYS_REFCURSOR,
O_I IN ALBUMS_VIEW.OWNER_ID%TYPE,
A_T IN ALBUMS_VIEW.ALBUM_TITLE%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR SELECT ALBUM_ID,ALBUM_TITLE,ALBUM_CREATED 
    FROM ALBUMS_VIEW
      WHERE OWNER_ID = O_I 
        AND UPPER(ALBUM_TITLE) LIKE UPPER('%'||A_T||'%');
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20027, 'error when reading albums');
END GET_ALBUMS_BY_TITLE;
--------------------------------------------------------------------------------
CREATE OR REPLACE PUBLIC SYNONYM GET_ALBUMS_BY_DATE FOR FISHY_ADMIN.GET_ALBUMS_BY_DATE;
--DROP PUBLIC SYNONYM GET_ALBUMS_BY_DATE;

--DROP PROCEDURE GET_ALBUMS_BY_DATE;
CREATE OR REPLACE PROCEDURE GET_ALBUMS_BY_DATE(
RESULT_CURSOR OUT SYS_REFCURSOR,
O_ID IN USERS.ID%TYPE,
D IN DATE,
AFTER_DATE BOOLEAN:=FALSE)
IS
BEGIN
  IF AFTER_DATE = TRUE THEN
    OPEN RESULT_CURSOR FOR 
      SELECT ALBUM_ID,ALBUM_TITLE,ALBUM_CREATED 
        FROM ALBUMS_VIEW 
          WHERE OWNER_ID = O_ID 
            AND ALBUM_CREATED > CAST(D AS TIMESTAMP);
  ELSE
    OPEN RESULT_CURSOR FOR 
      SELECT ALBUM_ID,ALBUM_TITLE,ALBUM_CREATED 
        FROM ALBUMS_VIEW
          WHERE OWNER_ID = O_ID 
            AND ALBUM_CREATED <= CAST(D AS TIMESTAMP);
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20027, 'error when reading albums');
END GET_ALBUMS_BY_DATE;
--------------------------------------------------------------------------------

--EXCEPTION 10-20 USE FRIEND_ALREADY_EXISTS; FRIEND_DOESNT_EXISTS

--10 friend with this id already exists
--11 add friend error
--12 friend with this id doesn`t exists
--13 delete friend error
--14 error when reading friends

--------------------------------------------------------------------------------
CREATE OR REPLACE PUBLIC SYNONYM ADD_FRIEND FOR FISHY_ADMIN.ADD_FRIEND;
--DROP PUBLIC SYNONYM ADD_FRIEND;

--DROP PROCEDURE ADD_FRIEND;
CREATE OR REPLACE PROCEDURE ADD_FRIEND(
MY_ID FRIENDS.USER_1%TYPE,
FRIEND_ID FRIENDS.USER_2%TYPE)
IS
  FRIEND_COUNT NUMBER;
BEGIN
  SELECT COUNT(*) INTO FRIEND_COUNT 
    FROM FRIENDS
      WHERE USER_1 = MY_ID AND USER_2 = FRIEND_ID;
  IF FRIEND_COUNT = 0 THEN
    INSERT INTO FRIENDS VALUES(MY_ID,FRIEND_ID);
  ELSE
    RAISE EXCEPTION_PACKAGE.FRIEND_ALREADY_EXISTS;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.FRIEND_ALREADY_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20010, 'friend with this id already exists');
      
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20011, 'add friend error');
END ADD_FRIEND;
--------------------------------------------------------------------------------
CREATE OR REPLACE PUBLIC SYNONYM DELETE_FRIEND_BY_ID FOR FISHY_ADMIN.DELETE_FRIEND_BY_ID;
--DROP PUBLIC SYNONYM DELETE_FRIEND_BY_ID;

--DROP PROCEDURE DELETE_FRIEND_BY_ID;
CREATE OR REPLACE PROCEDURE DELETE_FRIEND_BY_ID(
MY_ID FRIENDS.USER_1%TYPE,
FRIEND_ID FRIENDS.USER_2%TYPE)
IS
  FRIEND_COUNT NUMBER;
BEGIN
 SELECT COUNT(*) INTO FRIEND_COUNT
  FROM FRIENDS 
    WHERE USER_1 = MY_ID AND USER_2 = FRIEND_ID;
  IF FRIEND_COUNT = 0 THEN
    RAISE EXCEPTION_PACKAGE.FRIEND_DOESNT_EXISTS;
  ELSE
    DELETE FRIENDS WHERE USER_1 = MY_ID AND USER_2 = FRIEND_ID;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.FRIEND_DOESNT_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20012, 'friend with this id doesn`t exists');
      
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20013, 'delete friend error');
END DELETE_FRIEND_BY_ID;
--------------------------------------------------------------------------------
CREATE OR REPLACE PUBLIC SYNONYM GET_FRIEND_BY_ID FOR FISHY_ADMIN.GET_FRIEND_BY_ID;
--DROP PUBLIC SYNONYM GET_FRIEND_BY_ID;

--DROP PROCEDURE GET_FRIEND_BY_ID;
CREATE OR REPLACE PROCEDURE GET_FRIEND_BY_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
U_ID IN FRIENDS_VIEW.ME_ID%TYPE,
F_ID IN FRIENDS_VIEW.FRIEND_ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT FRIEND_ID,FRIEND_FIRST_NAME,FRIEND_LAST_NAME,FRIEND_EMAIL,FRIEND_AVATAR 
      FROM FRIENDS_VIEW 
        WHERE FRIEND_ID = F_ID AND ME_ID = U_ID;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20014, 'error when reading friends');
END GET_FRIEND_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_FRIENDS_BY_NAME FOR FISHY_ADMIN.GET_FRIENDS_BY_NAME;
--DROP PUBLIC SYNONYM GET_FRIENDS_BY_NAME;

--DROP PROCEDURE GET_FRIENDS_BY_NAME;
CREATE OR REPLACE PROCEDURE GET_FRIENDS_BY_NAME(
RESULT_CURSOR OUT SYS_REFCURSOR,
U_ID IN FRIENDS_VIEW.ME_ID%TYPE,
F_FIRST_NAME IN FRIENDS_VIEW.FRIEND_FIRST_NAME%TYPE := NULL,
F_LAST_NAME IN FRIENDS_VIEW.FRIEND_LAST_NAME%TYPE := NULL)
IS
BEGIN
  IF F_FIRST_NAME IS NULL AND F_LAST_NAME IS NULL THEN
    OPEN RESULT_CURSOR FOR 
      SELECT FRIEND_ID,FRIEND_FIRST_NAME,FRIEND_LAST_NAME,FRIEND_EMAIL,FRIEND_AVATAR
        FROM FRIENDS_VIEW 
          WHERE  ME_ID = U_ID;
  ELSIF F_FIRST_NAME IS NULL THEN
    OPEN RESULT_CURSOR FOR
      SELECT FRIEND_ID,FRIEND_FIRST_NAME,FRIEND_LAST_NAME,FRIEND_EMAIL,FRIEND_AVATAR 
        FROM FRIENDS_VIEW 
          WHERE  ME_ID = U_ID AND UPPER(FRIEND_LAST_NAME) LIKE UPPER('%'||F_LAST_NAME||'%');
  ELSIF F_LAST_NAME IS NULL THEN
    OPEN RESULT_CURSOR FOR
      SELECT FRIEND_ID,FRIEND_FIRST_NAME,FRIEND_LAST_NAME,FRIEND_EMAIL,FRIEND_AVATAR 
        FROM FRIENDS_VIEW 
          WHERE  ME_ID = U_ID AND UPPER(FRIEND_FIRST_NAME) LIKE UPPER('%'||F_FIRST_NAME||'%');
  ELSE
    OPEN RESULT_CURSOR FOR 
      SELECT FRIEND_ID,FRIEND_FIRST_NAME,FRIEND_LAST_NAME,FRIEND_EMAIL,FRIEND_AVATAR
        FROM FRIENDS_VIEW 
          WHERE  ME_ID = U_ID 
            AND UPPER(FRIEND_FIRST_NAME) LIKE UPPER('%'||F_FIRST_NAME||'%')
            AND UPPER(FRIEND_LAST_NAME) LIKE UPPER('%'||F_LAST_NAME||'%');
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20007, 'error when reading friends');
END GET_FRIENDS_BY_NAME;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_FRIEND_BY_EMAIL FOR FISHY_ADMIN.GET_FRIEND_BY_EMAIL;
--DROP PUBLIC SYNONYM GET_FRIEND_BY_EMAIL;

--DROP PROCEDURE GET_FRIEND_BY_EMAIL;
CREATE OR REPLACE PROCEDURE GET_FRIEND_BY_EMAIL(
RESULT_CURSOR OUT SYS_REFCURSOR,
U_ID IN FRIENDS_VIEW.ME_ID%TYPE,
F_EMAIL IN USERS_VIEW.EMAIL%TYPE := NULL)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT FRIEND_ID,FRIEND_FIRST_NAME,FRIEND_LAST_NAME,FRIEND_EMAIL,FRIEND_AVATAR 
      FROM FRIENDS_VIEW 
        WHERE ME_ID = U_ID AND FRIEND_EMAIL = F_EMAIL;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20007, 'error when reading friends');
END GET_FRIEND_BY_EMAIL;
--------------------------------------------------------------------------------

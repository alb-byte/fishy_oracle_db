-- EXCEPTION 80 - 90

-- 80 fish with this name already exists
-- 81 fish data entered incorrectly
-- 82 fish does not exist
-- 83 error delete fish
-- 84 error update fish
-- 85 error when reading fishes

--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM ADD_FISH FOR FISHY_ADMIN.ADD_FISH;
--DROP PUBLIC SYNONYM ADD_FISH;

--DROP PROCEDURE ADD_FISH;
CREATE OR REPLACE PROCEDURE ADD_FISH(
FISH_NAME FISHES.NAME%TYPE,
FISH_INFO FISHES.INFO%TYPE,
FISH_PHOTO FISHES.PHOTO%TYPE,
FISH_USER_ID FISHES.USER_ID%TYPE)
IS
  FISH_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO FISH_COUNTER 
    FROM FISHES 
      WHERE UPPER(NAME) = UPPER(FISH_NAME);
  IF FISH_COUNTER = 0 THEN
    INSERT INTO FISHES(NAME,CREATED,INFO,PHOTO,USER_ID)
      VALUES (FISH_NAME,CURRENT_TIMESTAMP,FISH_INFO,FISH_PHOTO,FISH_USER_ID);
  ELSE
    RAISE EXCEPTION_PACKAGE.FISH_ALREADY_EXISTS;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.FISH_ALREADY_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20080,'fish with this name already exists');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20081, 'fish data entered incorrectly');
END ADD_FISH;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_FISH_BY_ID FOR FISHY_ADMIN.DELETE_FISH_BY_ID;
--DROP PUBLIC SYNONYM DELETE_FISH_BY_ID;

--DROP PROCEDURE DELETE_FISH_BY_ID;
CREATE OR REPLACE PROCEDURE DELETE_FISH_BY_ID(
FISH_ID FISHES.ID%TYPE)
IS
  FISH_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO FISH_COUNTER 
    FROM FISHES 
      WHERE ID = FISH_ID;
  IF FISH_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.FISH_DOESNT_EXISTS;
  ELSE
    DELETE FISHES WHERE ID = FISH_ID;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.FISH_DOESNT_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20082,'fish does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20083, 'error delete fish');
END DELETE_FISH_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_FISH_BY_NAME FOR FISHY_ADMIN.DELETE_FISH_BY_NAME;
--DROP PUBLIC SYNONYM DELETE_FISH_BY_NAME;

--DROP PROCEDURE DELETE_FISH_BY_NAME;
CREATE OR REPLACE PROCEDURE DELETE_FISH_BY_NAME(
FISH_NAME FISHES.NAME%TYPE)
IS
  FISH_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO FISH_COUNTER 
    FROM FISHES 
      WHERE NAME = FISH_NAME;
  IF FISH_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.FISH_DOESNT_EXISTS;
  ELSE
    DELETE FISHES WHERE NAME = FISH_NAME;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.FISH_DOESNT_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20082,'fish does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20083, 'error delete fish');
END DELETE_FISH_BY_NAME;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM UPDATE_FISH FOR FISHY_ADMIN.UPDATE_FISH;
--DROP PUBLIC SYNONYM UPDATE_FISH;

--DROP PROCEDURE UPDATE_FISH;
CREATE OR REPLACE PROCEDURE UPDATE_FISH(
FISH_ID FISHES.ID%TYPE,
FISH_NAME FISHES.NAME%TYPE := NULL,
FISH_INFO FISHES.INFO%TYPE := NULL,
FISH_PHOTO FISHES.PHOTO%TYPE := NULL,
FISH_USER_ID FISHES.USER_ID%TYPE := NULL)
IS
  NEW_FISH_NAME FISHES.NAME%TYPE;
  NEW_FISH_INFO FISHES.INFO%TYPE;
  NEW_FISH_PHOTO FISHES.PHOTO%TYPE;
  CHANGEABLE_ENTRY FISHES%ROWTYPE;
BEGIN
  SELECT * INTO CHANGEABLE_ENTRY 
    FROM FISHES 
      WHERE ID = FISH_ID;
  
  IF FISH_NAME IS NULL THEN
    NEW_FISH_NAME := CHANGEABLE_ENTRY.NAME;
  ELSE
    NEW_FISH_NAME := FISH_NAME;
  END IF;
  IF FISH_INFO IS NULL THEN
    NEW_FISH_INFO := CHANGEABLE_ENTRY.INFO;
  ELSE
    NEW_FISH_INFO := FISH_INFO;
  END IF;
  IF FISH_PHOTO IS NULL THEN
    NEW_FISH_PHOTO := CHANGEABLE_ENTRY.PHOTO;
  ELSE
    NEW_FISH_PHOTO := FISH_PHOTO;
  END IF;
  
  UPDATE FISHES 
    SET NAME = NEW_FISH_NAME,INFO = NEW_FISH_INFO,PHOTO = NEW_FISH_PHOTO 
      WHERE ID = FISH_ID;
  COMMIT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20082,'fish does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20084, 'error update fish');
END UPDATE_FISH;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_FISHES FOR FISHY_ADMIN.GET_FISHES;
--DROP PUBLIC SYNONYM GET_FISHES;

--DROP PROCEDURE GET_FISHES;
CREATE OR REPLACE PROCEDURE GET_FISHES(
RESULT_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT * 
      FROM FISHES_VIEW
        ORDER BY FISH_NAME;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20085, 'error when reading fishes');
END GET_FISHES;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_FISH_BY_NAME FOR FISHY_ADMIN.GET_FISH_BY_NAME;
--DROP PUBLIC SYNONYM GET_FISH_BY_NAME;

--DROP PROCEDURE GET_FISH_BY_NAME;
CREATE OR REPLACE PROCEDURE GET_FISH_BY_NAME(
RESULT_CURSOR OUT SYS_REFCURSOR,
F_NAME FISHES_VIEW.FISH_NAME%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT * 
      FROM FISHES_VIEW 
        WHERE UPPER(FISH_NAME) LIKE UPPER('%'||F_NAME||'%') 
          ORDER BY FISH_NAME DESC;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20085, 'error when reading fishes');
END GET_FISH_BY_NAME;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_FISH_BY_ID FOR FISHY_ADMIN.GET_FISH_BY_ID;
--DROP PUBLIC SYNONYM GET_FISH_BY_ID;

--DROP PROCEDURE GET_FISH_BY_ID;
CREATE OR REPLACE PROCEDURE GET_FISH_BY_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
F_ID FISHES_VIEW.FISH_ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT *
      FROM FISHES_VIEW 
        WHERE FISH_ID = F_ID;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20085, 'error when reading fishes');
END GET_FISH_BY_ID;
--------------------------------------------------------------------------------
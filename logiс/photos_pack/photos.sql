-- EXCEPTIONS 30 - 40 USE PHOTO_DOESNT_EXISTS

--30 create photo error check the entered data
--32 photo with that id does not exist
--31 delete photo error check the entered data
--33 photo with that album_id does not exist
--34 error when reading photos

--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM ADD_PHOTO FOR FISHY_ADMIN.ADD_PHOTO;
--DROP PUBLIC SYNONYM ADD_PHOTO;

--DROP PROCEDURE ADD_PHOTO;
CREATE OR REPLACE PROCEDURE ADD_PHOTO(
  PHOTO_PATH IN PHOTOS.PHOTO%TYPE,
  PHOTO_ALBUM_ID IN PHOTOS.ALBUM_ID%TYPE,
  PHOTO_LONG IN PHOTOS.LONGITUDE%TYPE:=NULL,
  PHOTO_LAT IN PHOTOS.LATITUDE%TYPE:=NULL)
IS
BEGIN
  INSERT INTO PHOTOS(PHOTO,ALBUM_ID,CREATED,LONGITUDE,LATITUDE)
    VALUES(PHOTO_PATH,PHOTO_ALBUM_ID,CURRENT_TIMESTAMP,PHOTO_LONG,PHOTO_LAT);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20030, 'create photo error check the entered data');
END ADD_PHOTO;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_PHOTO_BY_ID FOR FISHY_ADMIN.DELETE_PHOTO_BY_ID;
--DROP PUBLIC SYNONYM DELETE_PHOTO_BY_ID;

--DROP PROCEDURE DELETE_PHOTO_BY_ID;
CREATE OR REPLACE PROCEDURE DELETE_PHOTO_BY_ID(
PHOTO_ID IN PHOTOS.ID%TYPE)
IS
  ALBUM_COUNTER NUMBER; 
BEGIN
  SELECT COUNT(*) INTO ALBUM_COUNTER 
    FROM PHOTOS 
      WHERE ID = PHOTO_ID;
  IF ALBUM_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.PHOTO_DOESNT_EXISTS;
  ELSE
    DELETE PHOTOS
      WHERE ID = PHOTO_ID;
  END IF;
  COMMIT;
EXCEPTION
    WHEN EXCEPTION_PACKAGE.PHOTO_DOESNT_EXISTS THEN
      RAISE_APPLICATION_ERROR(-20032, 'photo with that id does not exist');
    
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20031, 'delete photo error check the entered data');
END DELETE_PHOTO_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_PHOTO_BY_ALBUM_ID FOR FISHY_ADMIN.DELETE_PHOTO_BY_ALBUM_ID;
--DROP PUBLIC SYNONYM DELETE_PHOTO_BY_ALBUM_ID;

--DROP PROCEDURE DELETE_PHOTO_BY_ALBUM_ID;
CREATE OR REPLACE PROCEDURE DELETE_PHOTO_BY_ALBUM_ID(
PHOTO_ALBUM_ID IN PHOTOS.ALBUM_ID%TYPE)
IS
  ALBUM_COUNTER NUMBER; 
BEGIN
  SELECT COUNT(*) INTO ALBUM_COUNTER 
    FROM PHOTOS 
      WHERE ALBUM_ID = PHOTO_ALBUM_ID;
  IF ALBUM_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.PHOTO_DOESNT_EXISTS;
  ELSE
    DELETE PHOTOS WHERE ALBUM_ID = PHOTO_ALBUM_ID;
  END IF;
  COMMIT;
EXCEPTION
    WHEN EXCEPTION_PACKAGE.ALBUM_DOESNT_EXISTS THEN
      RAISE_APPLICATION_ERROR(-20033, 'photo with that album_id does not exist');
    
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20031, 'delete photo error check the entered data');
END DELETE_PHOTO_BY_ALBUM_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM UPDATE_PHOTO_COORDS FOR FISHY_ADMIN.UPDATE_PHOTO_COORDS;
--DROP PUBLIC SYNONYM UPDATE_PHOTO_COORDS;

--DROP PROCEDURE UPDATE_PHOTO_COORDS;
CREATE OR REPLACE PROCEDURE UPDATE_PHOTO_COORDS(
PHOTO_ID IN PHOTOS.ID%TYPE,
PHOTO_LONG PHOTOS.LONGITUDE%TYPE,
PHOTO_LAT PHOTOS.LATITUDE%TYPE)
IS
  ALBUM_COUNTER NUMBER; 
BEGIN
  SELECT COUNT(*) INTO ALBUM_COUNTER 
    FROM PHOTOS 
      WHERE ID = PHOTO_ID;
  IF ALBUM_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.PHOTO_DOESNT_EXISTS;
  ELSE
    UPDATE PHOTOS 
      SET LONGITUDE = PHOTO_LONG, LATITUDE = PHOTO_LAT 
        WHERE ID = PHOTO_ID;
  END IF;
  COMMIT;
EXCEPTION
    WHEN EXCEPTION_PACKAGE.PHOTO_DOESNT_EXISTS THEN
      RAISE_APPLICATION_ERROR(-20032, 'photo with that id does not exist');
    
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20031, 'delete photo error check the entered data');
END UPDATE_PHOTO_COORDS;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_PHOTOS_BY_ALBUM_ID FOR FISHY_ADMIN.GET_PHOTOS_BY_ALBUM_ID;
--DROP PUBLIC SYNONYM GET_PHOTOS_BY_ALBUM_ID;

--DROP PROCEDURE GET_PHOTOS_BY_ALBUM_ID;
CREATE OR REPLACE PROCEDURE GET_PHOTOS_BY_ALBUM_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
A_I IN PHOTOS_VIEW.ALBUM_ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT PHOTO_ID,PHOTO_PATH,PHOTO_CREATED 
      FROM  PHOTOS_VIEW 
        WHERE ALBUM_ID = A_I 
          ORDER BY PHOTO_CREATED DESC;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20034, 'error when reading photos');
END GET_PHOTOS_BY_ALBUM_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_PHOTO_BY_ID FOR FISHY_ADMIN.GET_PHOTO_BY_ID;
--DROP PUBLIC SYNONYM GET_PHOTO_BY_ID;

--DROP PROCEDURE GET_PHOTO_BY_ID;
CREATE OR REPLACE PROCEDURE GET_PHOTO_BY_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
P_I IN PHOTOS_VIEW.PHOTO_ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT PHOTO_ID,PHOTO_PATH,PHOTO_CREATED 
      FROM PHOTOS_VIEW 
        WHERE PHOTO_ID = P_I;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20034, 'error when reading photos');
END GET_PHOTO_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_PHOTO_BY_USER_ID FOR FISHY_ADMIN.GET_PHOTO_BY_USER_ID;
--DROP PUBLIC SYNONYM GET_PHOTO_BY_USER_ID;

--DROP PROCEDURE GET_PHOTO_BY_USER_ID;
CREATE OR REPLACE PROCEDURE GET_PHOTO_BY_USER_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
U_I IN PHOTOS_VIEW.OWNER_ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT PHOTO_ID,PHOTO_PATH,PHOTO_CREATED 
      FROM PHOTOS_VIEW 
        WHERE OWNER_ID = U_I;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20034, 'error when reading photos');
END GET_PHOTO_BY_USER_ID;
--------------------------------------------------------------------------------

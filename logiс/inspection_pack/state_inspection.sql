-- EXCEPTION 90 - 100
-- 90 inspection with this phone or region already exists
-- 91 inspection data entered incorrectly
-- 92 inspection does not exist
-- 93 error delete inspection
-- 94 error update inspection
-- 95 error when reading inspections
-- 99 phone entered incorrectly

--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM ADD_INSPECTION FOR FISHY_ADMIN.ADD_INSPECTION;
--DROP PUBLIC SYNONYM ADD_INSPECTION;

--DROP PROCEDURE ADD_INSPECTION;
CREATE OR REPLACE PROCEDURE ADD_INSPECTION(
INSPECTION_REGION STATE_INSPECTIONS.REGION%TYPE,
INSPECTION_ADDRESS STATE_INSPECTIONS.ADDRESS%TYPE,
INSPECTION_PHONE STATE_INSPECTIONS.PHONE%TYPE,
INSPECTION_USER_ID STATE_INSPECTIONS.USER_ID%TYPE)
IS
  INSPECTION_COUNTER NUMBER;
BEGIN
  IF VALIDATION_PACKAGE.CHECK_PHONE(INSPECTION_PHONE) = FALSE THEN
    RAISE EXCEPTION_PACKAGE.INCORRECTLY_PHONE;
  END IF;
  SELECT COUNT(*) INTO INSPECTION_COUNTER 
    FROM STATE_INSPECTIONS 
      WHERE REGION = INSPECTION_REGION 
        OR PHONE = INSPECTION_PHONE;
  IF INSPECTION_COUNTER = 0 THEN
    INSERT INTO STATE_INSPECTIONS(REGION,ADDRESS,PHONE,CREATED,USER_ID)
      VALUES (INSPECTION_REGION,INSPECTION_ADDRESS,INSPECTION_PHONE,CURRENT_TIMESTAMP,INSPECTION_USER_ID);
  ELSE
    RAISE EXCEPTION_PACKAGE.INSPECTION_ALREADY_EXISTS;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.INCORRECTLY_PHONE THEN
    RAISE_APPLICATION_ERROR(-20099,'phone entered incorrectly');
    
  WHEN EXCEPTION_PACKAGE.INSPECTION_ALREADY_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20090,'inspection with this phone or region already exists');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20091, 'inspection data entered incorrectly');
END ADD_INSPECTION;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_INSPECTION_BY_ID FOR FISHY_ADMIN.DELETE_INSPECTION_BY_ID;
--DROP PUBLIC SYNONYM DELETE_INSPECTION_BY_ID;

--DROP PROCEDURE DELETE_INSPECTION_BY_ID;
CREATE OR REPLACE PROCEDURE DELETE_INSPECTION_BY_ID(
INSPECTION_ID STATE_INSPECTIONS.ID%TYPE)
IS
  INSPECTION_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO INSPECTION_COUNTER 
    FROM STATE_INSPECTIONS
      WHERE ID = INSPECTION_ID;
  IF INSPECTION_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.INSPECTION_DOESNT_EXISTS;
  ELSE
    DELETE STATE_INSPECTIONS
      WHERE ID = INSPECTION_ID;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.INSPECTION_DOESNT_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20092,'inspection does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20093, 'error delete inspection');
END DELETE_INSPECTION_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_INSPECTION_BY_REGION FOR FISHY_ADMIN.DELETE_INSPECTION_BY_REGION;
--DROP PUBLIC SYNONYM DELETE_INSPECTION_BY_REGION;

--DROP PROCEDURE DELETE_INSPECTION_BY_REGION;
CREATE OR REPLACE PROCEDURE DELETE_INSPECTION_BY_REGION(
INSPECTION_REGION STATE_INSPECTIONS.REGION%TYPE)
IS
  INSPECTION_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO INSPECTION_COUNTER 
    FROM STATE_INSPECTIONS 
      WHERE UPPER(REGION) = UPPER(INSPECTION_REGION);
  IF INSPECTION_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.INSPECTION_DOESNT_EXISTS;
  ELSE
    DELETE STATE_INSPECTIONS 
      WHERE UPPER(REGION) = UPPER(INSPECTION_REGION);
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.INSPECTION_DOESNT_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20092,'inspection does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20093, 'error delete inspection');
END DELETE_INSPECTION_BY_REGION;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM UPDATE_INSPECTION FOR FISHY_ADMIN.UPDATE_INSPECTION;
--DROP PUBLIC SYNONYM UPDATE_INSPECTION;

--DROP PROCEDURE UPDATE_INSPECTION;
CREATE OR REPLACE PROCEDURE UPDATE_INSPECTION(
INSPECTION_ID STATE_INSPECTIONS.ID%TYPE,
INSPECTION_REGION STATE_INSPECTIONS.REGION%TYPE:=NULL,
INSPECTION_ADDRESS STATE_INSPECTIONS.ADDRESS%TYPE:=NULL,
INSPECTION_PHONE STATE_INSPECTIONS.PHONE%TYPE:=NULL
)
IS
  NEW_INSPECTION_REGION STATE_INSPECTIONS.REGION%TYPE;
  NEW_INSPECTION_ADDRESS STATE_INSPECTIONS.ADDRESS%TYPE;
  NEW_INSPECTION_PHONE STATE_INSPECTIONS.PHONE%TYPE;
  
  CHANGEABLE_ENTRY STATE_INSPECTIONS%ROWTYPE;
BEGIN
  
  SELECT * INTO CHANGEABLE_ENTRY 
    FROM STATE_INSPECTIONS 
      WHERE ID = INSPECTION_ID;
  
  IF INSPECTION_REGION IS NULL THEN
    NEW_INSPECTION_REGION := CHANGEABLE_ENTRY.REGION;
  ELSE
    NEW_INSPECTION_REGION := INSPECTION_REGION;
  END IF;
  
  IF INSPECTION_ADDRESS IS NULL THEN
    NEW_INSPECTION_ADDRESS := CHANGEABLE_ENTRY.ADDRESS;
  ELSE
    NEW_INSPECTION_ADDRESS := INSPECTION_ADDRESS;
  END IF;
  
  IF INSPECTION_PHONE IS NULL THEN
    NEW_INSPECTION_PHONE := CHANGEABLE_ENTRY.PHONE;
  ELSE
    NEW_INSPECTION_PHONE := INSPECTION_PHONE;
  END IF;
  
  IF VALIDATION_PACKAGE.CHECK_PHONE(NEW_INSPECTION_PHONE) = FALSE THEN
    RAISE EXCEPTION_PACKAGE.INCORRECTLY_PHONE;
  END IF;
  
  UPDATE STATE_INSPECTIONS 
    SET REGION = NEW_INSPECTION_REGION,ADDRESS = NEW_INSPECTION_ADDRESS,PHONE = NEW_INSPECTION_PHONE
      WHERE ID = INSPECTION_ID;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.INCORRECTLY_PHONE THEN
    RAISE_APPLICATION_ERROR(-20099,'phone entered incorrectly');
    
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20092,'inspection does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20094, 'error update inspection');
END UPDATE_INSPECTION;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_INSPECTIONS FOR FISHY_ADMIN.GET_INSPECTIONS;
--DROP PUBLIC SYNONYM GET_INSPECTIONS;

--DROP PROCEDURE GET_INSPECTIONS;
CREATE OR REPLACE PROCEDURE GET_INSPECTIONS(
RESULT_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT * 
      FROM INSPECTIONS_VIEW 
        ORDER BY INSPECTION_REGION;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20095, 'error when reading inspections');
END GET_INSPECTIONS;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_INSPECTION_BY_REGION FOR FISHY_ADMIN.GET_INSPECTION_BY_REGION;
--DROP PUBLIC SYNONYM GET_INSPECTION_BY_REGION;

--DROP PROCEDURE GET_INSPECTION_BY_REGION;
CREATE OR REPLACE PROCEDURE GET_INSPECTION_BY_REGION(
RESULT_CURSOR OUT SYS_REFCURSOR,
I_REGION INSPECTIONS_VIEW.INSPECTION_REGION%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT * 
      FROM INSPECTIONS_VIEW
        WHERE UPPER(INSPECTION_REGION) LIKE UPPER('%'||I_REGION||'%')
          ORDER BY INSPECTION_REGION;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20095, 'error when reading inspections');
END GET_INSPECTION_BY_REGION;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_INSPECTIONS_BY_ID FOR FISHY_ADMIN.GET_INSPECTIONS_BY_ID;
--DROP PUBLIC SYNONYM GET_INSPECTIONS_BY_ID;

--DROP PROCEDURE GET_INSPECTIONS_BY_ID;
CREATE OR REPLACE PROCEDURE GET_INSPECTIONS_BY_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
I_ID INSPECTIONS_VIEW.INSPECTION_ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT * 
      FROM INSPECTIONS_VIEW 
        WHERE INSPECTION_ID = I_ID;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20095, 'error when reading inspections');
END GET_INSPECTIONS_BY_ID;
--------------------------------------------------------------------------------
